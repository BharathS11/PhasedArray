# this module will be imported in the into your flowgraph
# https://learn.sparkfun.com/tutorials/raspberry-pi-spi-and-i2c-tutorial/all#spi-on-pi

import time
import spidev

# We only have SPI bus 0 available to us on the Pi
bus = 0

#Device is the chip select pin. Set to 0 or 1, depending on the connections
device = 1    # CS 0 is being used by the ADAR1000

# Enable SPI
spi = spidev.SpiDev()

# Open a connection to a specific bus and device (chip select pin)
spi.open(bus, device)

# Set SPI speed and mode
spi.max_speed_hz = 500000
spi.mode = 0

# Rasp Pi Broadcom chip can only do 8 bit SPI writes.
# So the 32 bit SPI writes of the ADF5356 need to be broken
# into 4 chunks.  Use the xfer2 command to keep CS low, until all 4 are there.

sel = 59      # 0=initialization, 1=10GHz, 2=9GHz, 3=9.5GHz, 4=10.5GHz, 5=11GHz, 99=disable 

# Initialize the ADF5356 and configure RF_OUTB

if sel==56:   #10GHz init try 7:32
    spi.xfer2([0x00, 0x00, 0x00, 0x0D])   # R13
    spi.xfer2([0x00, 0x00, 0x15, 0xFC])   # R12
    spi.xfer2([0x00, 0x61, 0x20, 0x0B])   # R11
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10
    spi.xfer2([0x27, 0x19, 0xFC, 0xC9]) # R9  0x2719FCC9
    spi.xfer2([0x15, 0x59, 0x65, 0x68])   # R8  0x15596568
    spi.xfer2([0x06, 0x00, 0x00, 0xE7])   # R7  0x60000E7
    spi.xfer2([0x35, 0x03, 0x00, 0x06]) # R6   0x35030006
    spi.xfer2([0x00, 0x80, 0x00, 0x25])   # R5  0x800025
    spi.xfer2([0x32, 0x00, 0x8B, 0x84]) # R4   0x32008B84
    spi.xfer2([0x00, 0x00, 0x00, 0x03])   # R3  0x3
    spi.xfer2([0x00, 0x04, 0x00, 0x32]) # R2  0x40032
    spi.xfer2([0x06, 0x15, 0x55, 0x51]) # R1  0x6155551
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x30, 0x05, 0x10]) # R0    0x300510
    print("ADF5356 Init Complete, 10 GHz")
    time.sleep(0.1)

if sel==55:   #10GHz init
    spi.xfer2([0x00, 0x00, 0x00, 0x0D])   # R13
    spi.xfer2([0x00, 0x00, 0x15, 0xFC])   # R12
    spi.xfer2([0x00, 0x61, 0x20, 0x0B])   # R11
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10
    spi.xfer2([0x27, 0x19, 0xFC, 0xC9]) # R9  0x2719FCC9
    spi.xfer2([0x15, 0x59, 0x65, 0x68])   # R8  0x15596568
    spi.xfer2([0x06, 0x00, 0x00, 0xE7])   # R7  0x60000E7
    spi.xfer2([0x15, 0x03, 0x00, 0x06]) # R6   0x15030006
    spi.xfer2([0x00, 0x80, 0x00, 0x25])   # R5  0x800025
    spi.xfer2([0x32, 0x00, 0x8B, 0x84]) # R4   0x32008B84
    spi.xfer2([0x00, 0x00, 0x00, 0x03])   # R3  0x3
    spi.xfer2([0x00, 0x04, 0x00, 0x32]) # R2  0x40032
    spi.xfer2([0x06, 0x15, 0x55, 0x51]) # R1  0x6155551
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x05, 0x10]) # R0    0x200510
    print("ADF5356 Init Complete, 10 GHz")
    time.sleep(0.1)

if sel==55:    # 10 GHz RF_OUTB freq update
    spi.xfer2([0x00, 0x00, 0x00, 0x0D]) # R13   0xD
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10   0xC026BA
    spi.xfer2([0x00, 0x04, 0x00, 0x32]) # R2    0x40032
    spi.xfer2([0x06, 0x15, 0x55, 0x51]) # R1    0x6155551
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x05, 0x10]) # R0    0x200510
    print("10GHz, alt method")
    time.sleep(0.1)
     
       
if sel==59:  # 9 GHz init
    spi.xfer2([0x00, 0x00, 0x00, 0x0D])   # R13
    spi.xfer2([0x00, 0x00, 0x15, 0xFC])   # R12
    spi.xfer2([0x00, 0x61, 0x20, 0x0B])   # R11
    spi.xfer2([0x00, 0xC0, 0x3F, 0xFA]) # R10
    spi.xfer2([0x4D, 0x33, 0x7C, 0xC9]) # R9 
    spi.xfer2([0x15, 0x59, 0x65, 0x68])   # R8
    spi.xfer2([0x06, 0x00, 0x00, 0xE7])   # R7
    spi.xfer2([0x15, 0x00, 0x80, 0x36]) # R6 
    spi.xfer2([0x00, 0x80, 0x00, 0x25])   # R5
    spi.xfer2([0x30, 0x01, 0x0B, 0x84]) # R4 
    spi.xfer2([0x00, 0x00, 0x00, 0x03])   # R3
    spi.xfer2([0x00, 0x00, 0x00, 0x12]) # R2
    spi.xfer2([0x03, 0xE0, 0x00, 0x01]) # R1
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x04, 0x90]) # R0
    spi.xfer2([0x30, 0x00, 0x8B, 0x84]) # R4
    spi.xfer2([0x00, 0x00, 0x00, 0x12]) # R2
    spi.xfer2([0x09, 0xF0, 0x00, 0x01]) # R1
    spi.xfer2([0x00, 0x00, 0x02, 0x40]) # R0
    print("ADF5356 Init Complete, 9 GHz")
    time.sleep(0.1)

'''if sel==1:    # 10 GHz RF_OUTB freq update
    spi.xfer2([0x00, 0x00, 0x00, 0x0D]) # R13
    spi.xfer2([0x00, 0xC0, 0x3F, 0xFA]) # R10
    spi.xfer2([0x15, 0x00, 0x80, 0x36]) # R6
    spi.xfer2([0x30, 0x01, 0x0B, 0x84]) # R4 
    spi.xfer2([0x00, 0x04, 0x00, 0x32]) # R2
    spi.xfer2([0x06, 0x15, 0x55, 0x51]) # R1
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x05, 0x10]) # R0
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10
    spi.xfer2([0x30, 0x00, 0x8B, 0x84]) # R4 
    spi.xfer2([0x00, 0x08, 0x00, 0x32]) # R2
    spi.xfer2([0x0B, 0x0A, 0xAA, 0xA1]) # R1
    spi.xfer2([0x00, 0x00, 0x02, 0x80]) # R0
    print("10GHz")
    time.sleep(0.1)'''

    
'''if sel==2:    # 9 GHz RF_OUTB freq update
    spi.xfer2([0x00, 0x00, 0x00, 0x0D]) # R13
    spi.xfer2([0x00, 0xC0, 0x3F, 0xFA]) # R10
    spi.xfer2([0x15, 0x00, 0x80, 0x36]) # R6
    spi.xfer2([0x30, 0x01, 0x0B, 0x84]) # R4 
    spi.xfer2([0x00, 0x00, 0x00, 0x12]) # R2 <<<<
    spi.xfer2([0x03, 0xE0, 0x00, 0x01]) # R1 <<<<
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x04, 0x90]) # R0 <<<<
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10
    spi.xfer2([0x30, 0x00, 0x8B, 0x84]) # R4 
    spi.xfer2([0x00, 0x00, 0x00, 0x12]) # R2 <<<<
    spi.xfer2([0x09, 0xF0, 0x00, 0x01]) # R1 <<<<
    spi.xfer2([0x00, 0x00, 0x02, 0x40]) # R0 <<<<
    print("9GHz")
    time.sleep(0.1)'''
    
'''if sel==1:    # 9.5 GHz RF_OUTB freq update
    spi.xfer2([0x00, 0x00, 0x00, 0x0D]) # R13
    spi.xfer2([0x00, 0xC0, 0x3F, 0xFA]) # R10
    spi.xfer2([0x15, 0x00, 0x80, 0x36]) # R6
    spi.xfer2([0x30, 0x01, 0x0B, 0x84]) # R4 
    spi.xfer2([0x00, 0x08, 0x00, 0x32]) # R2 <<<<
    spi.xfer2([0x04, 0xFA, 0xAA, 0xA1]) # R1 <<<<
    time.sleep(0.001)   # wait for ADC to settle
    spi.xfer2([0x00, 0x20, 0x04, 0xD0]) # R0 <<<<
    spi.xfer2([0x00, 0xC0, 0x26, 0xBA]) # R10
    spi.xfer2([0x30, 0x00, 0x8B, 0x84]) # R4 
    spi.xfer2([0x00, 0x04, 0x00, 0x32]) # R2 <<<<
    spi.xfer2([0x0A, 0x7D, 0x55, 0x51]) # R1 <<<<
    spi.xfer2([0x00, 0x00, 0x02, 0x60]) # R0 <<<<
    print("9.5GHz")
    time.sleep(0.1)'''
    



# Power down the ADF5356
if sel==99:
    print("sleep!")
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    time.sleep(0.1)

    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    time.sleep(0.1)
    
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
    spi.xfer2([0x00, 0x00, 0x00, 0x44])
